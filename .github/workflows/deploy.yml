name: Deploy to ECS

on:
  push:
    branches:
      - main
      - dev
      - 'feature/**'  # ← IMPORTANTE: Permitir feature branches
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: lab-terraform-ecs-dev-app
  ECS_CLUSTER: lab-terraform-ecs-dev-cluster
  ECS_SERVICE: lab-terraform-ecs-dev-service
  CONTAINER_NAME: lab-terraform-ecs-dev-app
  TASK_DEFINITION_FAMILY: lab-terraform-ecs-dev-app

# ⭐ NUEVO: Permisos para OIDC
permissions:
  id-token: write      # Necesario para JWT
  contents: read       # Necesario para checkout
  pull-requests: write # Para comentar en PRs

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    # ⭐ OPCIONAL: Solo desplegar desde main, en feature solo build+push
    # environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # ⭐ CAMBIO PRINCIPAL: OIDC en lugar de access keys
    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::942632789708:role/GitHubActionsECSOIDCRole
        role-session-name: GitHubActions-${{ github.run_id }}-${{ github.ref_name }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS identity
      run: |
        echo "### AWS Identity 🔐" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        aws sts get-caller-identity >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        BRANCH_TAG: ${{ github.ref_name }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG ./app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./app
        
        # Push all tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # ⭐ NUEVO: Solo desplegar a ECS desde main
    - name: Should deploy to ECS?
      id: should-deploy
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "deploy=true" >> $GITHUB_OUTPUT
          echo "### 🚀 Deploying to ECS" >> $GITHUB_STEP_SUMMARY
        else
          echo "deploy=false" >> $GITHUB_OUTPUT
          echo "### 📦 Build only (no ECS deployment)" >> $GITHUB_STEP_SUMMARY
          echo "Deployment will happen when merged to main" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Download task definition
      if: steps.should-deploy.outputs.deploy == 'true'
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.TASK_DEFINITION_FAMILY }} \
          --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      if: steps.should-deploy.outputs.deploy == 'true'
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      if: steps.should-deploy.outputs.deploy == 'true'
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Deployment Summary
      run: |
        echo "### Deployment Summary 🎯" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ steps.build-image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Auth Method**: OIDC ✅" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ steps.should-deploy.outputs.deploy }}" == "true" ]]; then
          echo "- **ECS Cluster**: \`${{ env.ECS_CLUSTER }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **ECS Service**: \`${{ env.ECS_SERVICE }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: Build only (no ECS deployment)" >> $GITHUB_STEP_SUMMARY
        fi
